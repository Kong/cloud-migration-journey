---
- name: Determine Token Type and Token Command 
  block:
    - debug:
        msg: "Creating Ingress Token for Zone: {{ zone_name }}"
      when: create_ingress is defined and create_ingress| bool

    - debug:
        msg: "Creating Egress Token for Zone: {{ zone_name }}"
      when: create_egress is defined and create_egress | bool

    - name: Set Token Creation Attributes to Ingress
      ansible.builtin.set_fact:
        token_type: "ingress"
        token_cmd: "/home/kuma/mesh/kong-mesh-1.8.1/bin/kumactl generate zone-ingress-token --zone {{ zone_name }} > {{ zone_name }}-ingress.token"
      when: create_ingress is defined and create_ingress| bool

    - name: Set Token Creation Attributes to Egress
      ansible.builtin.set_fact:
        token_type: "egress"
        token_cmd: "/home/kuma/mesh/kong-mesh-1.8.1/bin/kumactl generate zone-token --zone {{ zone_name }} --valid-for 720h --scope egress > {{ zone_name }}-egress.token"
      when: create_egress is defined and create_egress | bool
  run_once: true
  delegate_to: "{{ global_control_plane }}"

- name: "Create {{token_type | upper }} Token"
  block: 
    - name: "Check if {{token_type}} Token exists"
      ansible.builtin.stat:
        path: '/home/kuma/{{ zone_name }}-{{ token_type }}.token'
      register: st_token
    
    - name: "Create {{token_type | upper }} Token"
      ansible.builtin.shell: "{{ token_cmd }}"
      args: 
        chdir: /home/kuma/
      when: not st_token.stat.exists
    
    - name: "Get {{token_type | upper }} Token"
      ansible.builtin.shell: "cat /home/kuma/{{ zone_name }}-{{ token_type }}.token"
      register: token_result

    - name: "Fetch {{token_type | upper }} from Global CP to Bastion"
      ansible.builtin.fetch: 
        src: "/home/kuma/{{ zone_name }}-{{ token_type }}.token"
        dest: "{{playbook_dir}}/tokens/{{ zone_name }}-{{ token_type }}.token"
        flat: yes
  run_once: true
  delegate_to: "{{ global_control_plane }}"